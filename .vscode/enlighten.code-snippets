{
	// Place your sweet-home-webapp 작업 영역 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ENlighten Function Component": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "enfc",
		"body": [
			"// import dependency modules : package.json에 명시된 외부모듈을 선언하세요.",
			"import { Row, Col } from 'antd';",
			"import styled from 'styled-components';",
			"",
			"// import global modules : 서비스 전역에서 사용중인 모듈을 선언하세요.",
			"",
			"// import local modules : 지역(route)에서 사용중인 모듈을 선언하세요.",
			"",
			"export default function ${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}() {",
			"  return (",
			"    <$1Row>",
			"      <Col>$1</Col>",
			"    </$1Row>",
			"  );",
			"}",
			"",
			"// 함수로 작성한 styled component를 선언하세요.",
			"const $1Row = styled(Row)(({ theme }) => {",
			"  return {};",
			"});",
			"",
			""
		],
		"description": "ENlighten Function Component"
	},
	"ENlighten Provider": {
		"prefix": "enp",
		"body": [
			"import { useState, useCallback } from 'react';",
			"import constate from 'constate';",
			"",
			"// state의 type을 지정해주세요.",
			"type CounterProps = number;",
			"",
			"function use${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}() {",
			"  // counter 예제입니다.",
			"  const [count, setCount] = useState<CounterProps>(0);",
			"",
			"  const increment = useCallback(() => {",
			"    setCount((state) => state + 1);",
			"  }, []);",
			"",
			"  const decrement = useCallback(() => {",
			"    setCount((state) => state - 1);",
			"  }, []);",
			"",
			"  return { count, increment, decrement, setCount };",
			"}",
			"",
			"const [Provider, useCount, use$1Increment, use$1Decrement, useSet$1] = constate(",
			"  // 선언한 custom hook을 주입하세요.",
			"  use$1,",
			"  // custom hook에서 반환한 값을 selector로 지정하세요.",
			"  // custom hook의 API로 사용될 수 있게 각각의 selector를 기술해주세요.",
			"  (value) => value.count, // 현재 count 값 읽기",
			"  (value) => value.increment, // count 값 증가",
			"  (value) => value.decrement, // count 값 감소",
			"  (value) => value.setCount // count 설정",
			");",
			"",
			"export { Provider, useCount, use$1Increment, use$1Decrement, useSet$1 };",
			""
		],
		"description": "ENlighten Provider"
	},
	"import service":{
		"scope":  "javascriptreact,typescriptreact",
		"prefix": "ims",
		"body": [
		"import {service}from '@src/configs'"
		]
	}
}